diff --git a/wal/installer.go b/wal/installer.go
index 24bcb55a..8cb9a4a0 100644
--- a/wal/installer.go
+++ b/wal/installer.go
@@ -60,14 +60,14 @@ func (l *Walog) logInstall() (uint64, LogPosition) {
 		return 0, installEnd
 	}
 
-	l.memLock.Unlock()
+	//l.memLock.Unlock()
 
 	util.DPrintf(5, "logInstall up to %d\n", installEnd)
 	installBlocks(l.d, bufs)
 	l.d.Barrier()
 	Advance(l.d, installEnd)
 
-	l.memLock.Lock()
+	//l.memLock.Lock()
 	l.st.cutMemLog(installEnd)
 	l.condInstall.Broadcast()
 
diff --git a/wal/logger.go b/wal/logger.go
index fabc2700..ba11a347 100644
--- a/wal/logger.go
+++ b/wal/logger.go
@@ -34,11 +34,11 @@ func (l *Walog) logAppend(circ *circularAppender) bool {
 	if len(newbufs) == 0 {
 		return false
 	}
-	l.memLock.Unlock()
+	//l.memLock.Unlock()
 
 	circ.Append(l.d, diskEnd, newbufs)
 
-	l.memLock.Lock()
+	//l.memLock.Lock()
 
 	primitive.Linearize()
 
diff --git a/wal/wal.go b/wal/wal.go
index dbc69db0..19c15dce 100644
--- a/wal/wal.go
+++ b/wal/wal.go
@@ -101,7 +101,9 @@ func (l *Walog) ReadInstalled(blkno common.Bnum) disk.Block {
 // linearize between the l.memLog.Unlock() and the eventual disk read, due to
 // potential concurrent cache or disk writes).
 func (l *Walog) Read(blkno common.Bnum) disk.Block {
-	blk, ok := l.ReadMem(blkno)
+	l.memLock.Lock()
+	defer l.memLock.Unlock()
+	blk, ok := l.st.readMem(blkno)
 	if ok {
 		return blk
 	}
